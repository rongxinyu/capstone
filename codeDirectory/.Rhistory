source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
plotIvols_svibss(ivolData = spxOptData, sviMatrix = svifitQR)
download.file(url="http://mfe.baruch.cuny.edu/wp-content/uploads/2014/09/spxOptionMetrics.rData_.zip", destfile="spxOptionMetrics.rData.zip")
unzip(zipfile="spxOptionMetrics.rData.zip")
load("spxOptionMetrics.rData")
source('~/capstone/calibration/main.R', echo=TRUE)
plotIvols_svibss(ivolData=spxOptData, paths=paths, n=400,
bssMatrix=bssMatrix,  kappa=1, sviMatrix=svifitQR)
plotIvols_svibss(spxOptData)
source('~/capstone/calibration/main.R', echo=TRUE)
plotIvols_svibss(spxOptData)
source("BlackScholes.R")
source("optionMetricsToIvols.R")
source("sviFit0.R")
source("svi.R")
source('sviarbitrage.R')
source('sviRoots.R')
source('sviSqrtFit.R')
source("computeImpliedVols.R")
source("sviFitQuarticRoots.R")
source("sviVolSurface.R")
source('plotIvols_svibss.R')
source('hybrid_bss.R')
source('bssFit.R')
source('bss.R')
source('bssHistFit.R')
bssparams <- list(S0=1, xi=0.235^2, eta=1.9, alpha=-0.43, rho=-0.9)
finalPrices<- hybridScheme(bssparams)(1e4, 200, 1, 0.041)
source('~/capstone/calibration/main.R', echo=TRUE)
params <- list(S0=1, xi=0.235^2, eta=1.9, alpha=-0.43, rho=-0.9)
finalPrices<- hybridScheme(params)(1e4, 200, 1, 0.041)
k<-5
clr<- rainbow(k)
finalP<- list()
for (i in 1:k){
param<- params
param$xi<- (sqrt(param$xi)+0.01*i)^2
#print(i)
finalP[[i]]<- hybridScheme(param)(paths, n,1,T)
}
save(finalP, file='finalP_xi.rData')
curve(vol(x, finalPrices), from=-0.13, to=0.1, col='black',
xlab="Log strike", ylab="Implied Vol", ylim= c(0.1, 0.55) ,lwd=2)
print(vol(0, finalPrices))
for (i in 1:k){
curve(vol(x, finalP[[i]]),from=-0.15, to=0.1, add=TRUE, col=clr[i], lwd=2)
}
legend=c ('xi= 0.235^2',
legend( 'topright',
print(vol(0, finalP[[i]]))
'xi= 0.245^2',
'xi= 0.255^2',
'xi= 0.265^2',
'xi= 0.275^2',
'xi= 0.285^2'),
col = c('black', clr), lty=1)
title( 'Sensitivity on Xi')
for (i in 1:k){
curve(vol(x, finalP[[i]]),from=-0.15, to=0.1, add=TRUE, col=clr[i], lwd=2)
print(vol(0, finalP[[i]]))
}
curve(ImpliedVol(x, finalPrices), from=-0.13, to=0.1, col='black',
xlab="Log strike", ylab="Implied Vol", ylim= c(0.1, 0.55) ,lwd=2)
print(ImpliedVol(0, finalPrices))
for (i in 1:k){
curve(ImpliedVol(x, finalP[[i]]),from=-0.15, to=0.1, add=TRUE, col=clr[i], lwd=2)
print(ImpliedVol(0, finalP[[i]]))
}
curve(ImpliedVol(x, finalPrices), from=-0.4, to=0.2, col='black',
xlab="Log strike", ylab="Implied Vol", ylim= c(0.1, 0.55) ,lwd=2)
print(ImpliedVol(0, finalPrices))
for (i in 1:k){
curve(ImpliedVol(x, finalP[[i]]),from=-0.15, to=0.1, add=TRUE, col=clr[i], lwd=2)
print(ImpliedVol(0, finalP[[i]]))
}
legend( 'topright',
legend=c ('xi= 0.235^2',
curve(ImpliedVol(x, finalPrices), from=-0.4, to=0.2, col='black',
xlab="Log strike", ylab="Implied Vol", ylim= c(0.1, 0.55) ,lwd=2)
print(ImpliedVol(0, finalPrices))
for (i in 1:k){
curve(ImpliedVol(x, finalP[[i]]),from=-0.15, to=0.1, add=TRUE, col=clr[i], lwd=2)
print(ImpliedVol(0, finalP[[i]]))
}
legend( 'topright',
legend=c ('xi= 0.235^2',
'xi= 0.245^2',
'xi= 0.255^2',
'xi= 0.265^2',
'xi= 0.275^2',
'xi= 0.285^2'),
col = c('black', clr), lty=1)
title( 'Sensitivity on Xi')
curve(ImpliedVol(x, finalPrices), from=-0.4, to=0.2, col='black',
xlab="Log strike", ylab="Implied Vol", ylim= c(0.1, 0.55) ,lwd=2)
print(ImpliedVol(0, finalPrices))
for (i in 1:k){
curve(ImpliedVol(x, finalP[[i]]),from=-0.15, to=0.1, add=TRUE, col=clr[i], lwd=2)
print(ImpliedVol(0, finalP[[i]]))
}
legend( 'topright',
params <- list(S0=1, xi=0.235^2, eta=1.9, alpha=-0.43, rho=-0.9)
finalPrices<- hybridScheme(params)(1e4, 200, 1, 0.041)
k<-5
clr<- rainbow(k)
finalP<- list()
for (i in 1:k){
param<- params
param$xi<- (sqrt(param$xi)+0.01*i)^2
#print(i)
finalP[[i]]<- hybridScheme(param)(paths, n,1,T)
}
save(finalP, file='finalP_xi.rData')
curve(ImpliedVol(x, finalPrices), from=-0.4, to=0.2, col='black',
xlab="Log strike", ylab="Implied Vol", ylim= c(0.1, 0.55) ,lwd=2)
print(ImpliedVol(0, finalPrices))
for (i in 1:k){
curve(ImpliedVol(x, finalP[[i]]),from=-0.15, to=0.1, add=TRUE, col=clr[i], lwd=2)
print(ImpliedVol(0, finalP[[i]]))
}
legend( 'topright',
legend=c ('xi= 0.235^2',
'xi= 0.245^2',
'xi= 0.255^2',
'xi= 0.265^2',
'xi= 0.275^2',
'xi= 0.285^2'),
col = c('black', clr), lty=1)
title( 'Sensitivity on Xi')
T<-0.041
params <- list(S0=1, xi=0.235^2, eta=1.9, alpha=-0.43, rho=-0.9)
finalPrices<- hybridScheme(params)(1e4, 200, 1, 0.041)
k<-5
clr<- rainbow(k)
finalP<- list()
for (i in 1:k){
param<- params
param$xi<- (sqrt(param$xi)+0.01*i)^2
#print(i)
finalP[[i]]<- hybridScheme(param)(paths, n,1,T)
}
save(finalP, file='finalP_xi.rData')
curve(ImpliedVol(x, finalPrices), from=-0.4, to=0.2, col='black',
xlab="Log strike", ylab="Implied Vol", ylim= c(0.1, 0.55) ,lwd=2)
print(ImpliedVol(0, finalPrices))
for (i in 1:k){
curve(ImpliedVol(x, finalP[[i]]),from=-0.15, to=0.1, add=TRUE, col=clr[i], lwd=2)
print(ImpliedVol(0, finalP[[i]]))
}
legend( 'topright',
legend=c ('xi= 0.235^2',
'xi= 0.245^2',
'xi= 0.255^2',
'xi= 0.265^2',
'xi= 0.275^2',
'xi= 0.285^2'),
col = c('black', clr), lty=1)
title( 'Sensitivity on Xi')
T<-0.041
params <- list(S0=1, xi=0.235^2, eta=1.9, alpha=-0.43, rho=-0.9)
finalPrices<- hybridScheme(params)(1e4, 400, 1, 0.041)
k<-5
clr<- rainbow(k)
finalP<- list()
for (i in 1:k){
param<- params
param$xi<- (sqrt(param$xi)+0.03*i)^2
#print(i)
finalP[[i]]<- hybridScheme(param)(paths, n,1,T)
}
save(finalP, file='finalP_xi.rData')
curve(ImpliedVol(x, finalPrices), from=-0.4, to=0.2, col='black',
xlab="Log strike", ylab="Implied Vol", ylim= c(0.1, 0.55) ,lwd=2)
print(ImpliedVol(0, finalPrices))
for (i in 1:k){
curve(ImpliedVol(x, finalP[[i]]),from=-0.15, to=0.1, add=TRUE, col=clr[i], lwd=2)
print(ImpliedVol(0, finalP[[i]]))
}
legend( 'topright',
legend=c ('xi= 0.235^2',
'xi= 0.245^2',
'xi= 0.255^2',
'xi= 0.265^2',
'xi= 0.275^2',
'xi= 0.285^2'),
col = c('black', clr), lty=1)
title( 'Sensitivity on Xi')
T<-0.041
params <- list(S0=1, xi=0.235^2, eta=1.9, alpha=-0.43, rho=-0.9)
finalPrices<- hybridScheme(params)(1e4, 400, 1, 0.041)
k<-5
clr<- rainbow(k)
finalP<- list()
for (i in 1:k){
param<- params
param$xi<- (sqrt(param$xi)+0.04*i)^2
#print(i)
finalP[[i]]<- hybridScheme(param)(paths, n,1,T)
}
save(finalP, file='finalP_xi.rData')
curve(ImpliedVol(x, finalPrices), from=-0.4, to=0.2, col='black',
xlab="Log strike", ylab="Implied Vol", ylim= c(0.1, 0.55) ,lwd=2)
print(ImpliedVol(0, finalPrices))
for (i in 1:k){
curve(ImpliedVol(x, finalP[[i]]),from=-0.15, to=0.1, add=TRUE, col=clr[i], lwd=2)
print(ImpliedVol(0, finalP[[i]]))
}
legend( 'topright',
legend=c ('xi= 0.235^2',
'xi= 0.245^2',
'xi= 0.255^2',
'xi= 0.265^2',
'xi= 0.275^2',
'xi= 0.285^2'),
col = c('black', clr), lty=1)
title( 'Sensitivity on Xi')
optionData<- spxOptData[spxOptData$Texp>0.03 & spxOptData$Texp< 0.043, ]
head(optionData)
params[1,]
params
params[1]<- params
paranms
params
params[1]
params[1,]
params<-matrix(params, nrow=1)
params
colnames(params)<- c('S0', 'xi', 'eta', 'alpha', 'rho')
params
plotIvols_svibss(optionData, paths = 1e4, n = 400, bssMatrix = params)
plotIvols_svibss(optionData, paths = 1e4, n = 400, bssMatrix = params, kappa = 1)
params[1,]$rho<- -.94
params
plotIvols_svibss(optionData, paths = 1e4, n = 400, bssMatrix = params, kappa = 1)
params[1,]$rho<- -.99
plotIvols_svibss(optionData, paths = 1e4, n = 400, bssMatrix = params, kappa = 1)
params[1,]$xi<- 0.08
plotIvols_svibss(optionData, paths = 1e4, n = 400, bssMatrix = params, kappa = 1)
params[1,]$xi<- 0.1
params
plotIvols_svibss(optionData, paths = 1e4, n = 400, bssMatrix = params, kappa = 1)
plotIvols_svibss(spxOptData)
params
rep(params,3)
tmp<- unlist(params[1,])
tmp
tmp[1]
tmp[3]
tmp5
tmp[6]
tmp<-c(1,0.1, 1.9, -0.43, -0.99)
params<- matrix (rep(tmp, 14), nrow = 14, byrow = T)
params
colnames(params)<- c('S0', 'xi', 'eta', 'alpha', 'rho')
params
plotIvols_svibss(ivolData = spxOptData, paths= 1e4, n = 300, kappa = 1)
plotIvols_svibss(ivolData = spxOptData, paths= 1e4, n = 300, kappa = 1, bssMatrix = params)
params[1,]
params[1,]$S0
params<- as.data.frame(params)
params
params[1,]
params[1,]$S0
plotIvols_svibss(ivolData = spxOptData, paths= 1e4, n = 300, kappa = 1, bssMatrix = params)
plotIvols_svibss(ivolData = spxOptData, paths= 1e4, n = 300, kappa = 1, bssMatrix = params)
params[3,]
params[3,]$rho
params[3,]$eta
params[3,]$alpha
params[3,]$S0
params[3,]$xi
optionData<- spxOptData[spxOptData$Texp<0.01, ]
plotIvols_svibss(ivolData = optionData, paths= 1e4, n = 300, kappa = 1, bssMatrix = params)
optionData<- spxOptData[spxOptData$Texp>0.03, ]
plotIvols_svibss(ivolData = optionData, paths= 1e4, n = 300, kappa = 1, bssMatrix = params)
params$alpha<- rep(-0.38, 14)
plotIvols_svibss(ivolData = optionData, paths= 1e4, n = 300, kappa = 1, bssMatrix = params)
# rvParam<- OxfordManRV.param(rv.list = rvData, endDate = '2011-09-15', symbol = symbol)
paths<-1e3*5
n<-400
alpha<- rep(-0.45, 14)
S0<- rep(1,14)
eta<- rep(2.6,14)
rho<- rep(-.93, 14)
xi<- rep(0.12,14)
bssmatrix<- data.frame(S0=S0, alpha= alpha, eta=eta, xi=xi, rho=rho)
bssmatrix
load('OxfordManRVRaw.rData')
source("BlackScholes.R")
source("optionMetricsToIvols.R")
source("sviFit0.R")
source("svi.R")
source('sviarbitrage.R')
source('sviRoots.R')
source('sviSqrtFit.R')
source("computeImpliedVols.R")
source("sviFitQuarticRoots.R")
source("sviVolSurface.R")
source('plotIvols_svibss.R')
source('hybrid_bss.R')
source('bssFit.R')
source('bss.R')
source('bssHistFit.R')
# download.file(url="http://mfe.baruch.cuny.edu/wp-content/uploads/2014/09/spxOptionMetrics.rData_.zip", destfile="spxOptionMetrics.rData.zip")
# unzip(zipfile="spxOptionMetrics.rData.zip")
load("spxOptionMetrics.rData")
set.seed(9081)
spxData110915$strike_price <- spxData110915$strike_price/1000
spxOptData <- generateOptionMetricsIvols(spxData110915)
# spxOptData <- spxOptData[spxOptData$Texp>0.5 & spxOptData$Texp<0.78,  ]
symbol<- 'SPX2.rk'
endDate<- '2011-09-15'
# rvData<- OxfordManRV.clean(rv.data = OxfordManRVRaw.data)
# rvParam<- OxfordManRV.param(rv.list = rvData, endDate = '2011-09-15', symbol = symbol)
source('~/capstone/calibration/main.R', echo=TRUE)
plotIvols_svibss(spxOptData, bssMatrix = bssmatrix)
plotIvols_svibss(spxOptData, paths= 1e4, n= 200, kappa = 1, bssMatrix = bssmatrix)
plotIvols_svibss(spxOptData)
plotIvols_svibss(spxOptData, paths= 1e4, n= 400, kappa = 1, bssMatrix = bssmatrix)
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/hybrid_bss.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
ls()
ImpliedVol()
ImpliedVol
impvol()
impvol
ls()
T
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
source('bssIv.R')
a<- c(1,2,3,4,5)
a[a>4 & a<5]
a[a>4 & a<=5]
a<- c(1,2,22, 6,21, 8787,32)
a[a>4 & a<=5]
a[a>4 & a<1000]
index(a>4 & a<=100)
which(a>4 & a<100)
a[which(a>4 & a<100)
}
a[which(a>4 & a<100)]
? optimize
u<- function (x,y) x^2+y^2
optimise(u, y=100)
optimise(u, y=100, c(-1,1000))
optimise(u, y=100, c(-1,1000), maximum = T)
source('bssFit.R')
source('bss.R')
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
numeric(10)
numeric(10)[1]
numeric(10)[0]
numeric(10)[0]<-1
source('~/capstone/calibration/main.R', echo=TRUE)
message('sdfsd':t)
message('sdfsd:' symbol)
message('sdfsd:' paths)
message('sdfsd:' ,paths)
message('sdfsd:' ,paths, 'sdfsd')
save(bssmatrix, file= 'spx20110915bss.rData')
rm(list=ls())
library(stinepack)
#
# download.file(url="http://realized.oxford-man.ox.ac.uk/media/1366/oxfordmanrealizedvolatilityindices.zip",
#               destfile="oxfordRvData.zip")
# unzip(zipfile="oxfordRvData.zip")
# OxfordManRVRaw.data <- read.csv("OxfordManRealizedVolatilityIndices.csv", stringsAsFactors = F)
# save(OxfordManRVRaw.data, file='OxfordManRVRaw.rData')
#load("spxOptionMetrics.rData")
load('OxfordManRVRaw.rData')
source("BlackScholes.R")
source("optionMetricsToIvols.R")
source("sviFit0.R")
source("svi.R")
source('sviarbitrage.R')
source('sviRoots.R')
source('sviSqrtFit.R')
source("computeImpliedVols.R")
source("sviFitQuarticRoots.R")
source("sviVolSurface.R")
source('plotIvols_svibss.R')
source('hybrid_bss.R')
source('bssFit.R')
source('bss.R')
# download.file(url="http://mfe.baruch.cuny.edu/wp-content/uploads/2014/09/spxOptionMetrics.rData_.zip", destfile="spxOptionMetrics.rData.zip")
# unzip(zipfile="spxOptionMetrics.rData.zip")
load("spxOptionMetrics.rData")
curve(x, from =-3, to=2, lty=2)
curve(x*0, from =-3, to=2, lty=2)
curve(x*0, from =-3, to=2, lty=3)
curve(x*0, from =-3, to=2, lty=1)
curve(x*0, from =-3, to=2, lty=1.5)
curve(x*0, from =-3, to=2, lty=2)
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
svifitSqrt <- sviSqrtFit(spxOptData)
svifitQR<- sviFitQR(ivolData = spxOptData, sviGuess = svifitSqrt )
plotIvols_svibss(ivolData = spxOptData, paths= 1e4, n= 400, bssplotscale = .5,
kappa = 1, bssMatrix = bssmatrix$normal, sviMatrix = svifitQR , slices = 1:7 )
#
plotIvols_svibss(ivolData = spxOptData, paths= 1e4, n= 400, bssplotscale = .5,
kappa = 1, bssMatrix = bssmatrix$best, sviMatrix = svifitQR , slices = 1:7 )
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
set.seed(9081)
plotIvols_svibss(ivolData = spxOptData, paths= 1e4, n= 400, bssplotscale = .5,
kappa = 1, bssMatrix = bssmatrix$best, sviMatrix = svifitQR , slices = 3:4 )
set.seed(9081)
plotIvols_svibss(ivolData = spxOptData, paths= 1e4, n= 400, bssplotscale = .5,
kappa = 1, bssMatrix = bssmatrix$best, sviMatrix = svifitQR , slices = 3:4 )
#
bssmatrix
bssmatrix<- bssSqFit(spxOptData, paths = 5e3, n = 400, slices = c(1,4))
save(bssmatrix, file= 'spx20110915bss.rData')
svifitSqrt <- sviSqrtFit(spxOptData)
svifitQR<- sviFitQR(ivolData = spxOptData, sviGuess = svifitSqrt )
set.seed(9081)
plotIvols_svibss(ivolData = spxOptData, paths= 1e4, n= 400, bssplotscale = .5,
kappa = 1, bssMatrix = bssmatrix$best, sviMatrix = svifitQR , slices = c(1,4) )
#
# # ### Estimate the bss params based on pure fitting optimization
# #bssfit0 <- bssFit(spxOptData, paths, n, kappa=1)
# ###
#
bssmatrix
source('~/capstone/calibration/main.R', echo=TRUE)
bssmatrix
source('~/capstone/calibration/bssFit.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
bssmatrix
plotIvols_svibss(ivolData = spxOptData, paths= 1e4, n= 400, bssplotscale = .5,
kappa = 1, bssMatrix = bssmatrix$best, sviMatrix = svifitQR , slices = c(1,4) )
plotIvols_svibss(ivolData = spxOptData, paths= 1e4, n= 400, bssplotscale = .5,
kappa = 1, bssMatrix = bssmatrix$best, sviMatrix = svifitQR , slices = c(1,4) )
# load('OxfordManRVRaw.rData')
source("BlackScholes.R")
source("optionMetricsToIvols.R")
source("sviFit0.R")
source("svi.R")
source('sviarbitrage.R')
source('sviRoots.R')
source('sviSqrtFit.R')
source("computeImpliedVols.R")
source("sviFitQuarticRoots.R")
source("sviVolSurface.R")
source('plotIvols_svibss.R')
source('hybrid_bss.R')
source('bssFit.R')
source('bss.R')
plotIvols_svibss(ivolData = spxOptData, paths= 1e4, n= 400, bssplotscale = .5,
kappa = 1, bssMatrix = bssmatrix$best, sviMatrix = svifitQR , slices = c(1,4) )
plotIvols_svibss(ivolData = spxOptData, paths= 1e4, n= 400, bssplotscale = .5,
kappa = 1, bssMatrix = bssmatrix$normal, sviMatrix = svifitQR , slices = c(1,4) )
bssmatrix
bssmatrix<- bssSqFit(spxOptData, paths = 5e3, n = 300 )
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
bssmatrix<- bssSqFit(spxOptData, paths = 5e3, n = 400 )
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/calibration/main.R', echo=TRUE)
bssmatrix<- bssSqFit(spxOptData, paths = 5e3, n = 200 , slices = 10)
bssmatrix<- bssSqFit(spxOptData, paths = 5e3, n = 150, slices = 10 )
bssmatrix<- bssSqFit(spxOptData, paths = 5e3, n = 150, slices = 7 )
bssmatrix<- bssSqFit(spxOptData, paths = 5e3, n = 200)
source('~/capstone/calibration/main.R', echo=TRUE)
bssmatrix
bssmatrix
plotIvols_svibss(ivolData = spxOptData, paths= 1e5, n= 200, bssplotscale = .6,
kappa = 1, bssMatrix = bssmatrix$best, sviMatrix = svifitQR  )
# load('OxfordManRVRaw.rData')
source("BlackScholes.R")
source("optionMetricsToIvols.R")
source("sviFit0.R")
source("svi.R")
source('sviarbitrage.R')
source('sviRoots.R')
source('sviSqrtFit.R')
source("computeImpliedVols.R")
source("sviFitQuarticRoots.R")
source("sviVolSurface.R")
source('plotIvols_svibss.R')
source('hybrid_bss.R')
source('bssFit.R')
source('bss.R')
plotIvols_svibss(ivolData = spxOptData, paths= 1e5, n= 200, bssplotscale = .6,
kappa = 1, bssMatrix = bssmatrix$best, sviMatrix = svifitQR  )
plotIvols_svibss(ivolData = spxOptData, paths= 1e5, n= 200, bssplotscale = .6,
kappa = 1, bssMatrix = bssmatrix$best  )
source('~/capstone/calibration/main.R', echo=TRUE)
source('~/capstone/codeDirectory/main.R', echo=TRUE)
bssmatrix<- bssSqFit(spxOptData, paths = 5e3, n = 200)
source('~/capstone/codeDirectory/hybrid_bss.R', echo=TRUE)
source('~/capstone/codeDirectory/main.R', echo=TRUE)
source('~/capstone/codeDirectory/main.R', echo=TRUE)
